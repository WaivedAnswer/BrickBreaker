//Player.h"
#ifndef _PLAYER_H
#define _PLAYER_H

#include "Command.h"
#include "SDL2/SDL.h"
#include "common.h"
#include <vector>
class Actor;
class Player
{
	public:
		Player();
		~Player();
		int GetScore();
		void SetScore(int score);
		//should player or world be responsible for removing/deleting actor? I think world, because it will automatically delete all objects from its list on remove
		//just need to make sure that player actors always exist within world or that they communicate enough that actor only deletes it when necessary. maybe smart pointer in future?
		Actor* GetActor();
		void SetActor(Actor* actor);
		int GetLives();
		void SetLives(int lives);
		//debate using commands here
		//switchout from SDL stuff
		void HandleInput(SDL_Event& e);
	private:
		Actor* m_actor;
		int m_score;
		int m_lives;
		std::vector<Directions> dirStack;
};

#endif
